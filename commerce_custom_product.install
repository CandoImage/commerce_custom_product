<?php
/**
 * @file
 * Defines the database schema for customizable product support.
 */

/**
 * Implements hook_schema().
 */
function commerce_custom_product_schema() {
  $schema = array();

  $schema['commerce_product_line_item_type'] = array(
    'description' => 'Stores information about custom product line item types.',
    'fields' => array(
      'type' => array(
        'description' => 'The machine-name of the line item type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The human-readable name of the line item type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('type'),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function commerce_custom_product_field_schema($field) {
  if ($field['type'] == 'commerce_custom_product_line_item_type_reference') {
    return array(
      'columns' => array(
        'target_id' => array(
          'description' => 'Stored ID of line item type being referenced.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'use_multi' => array(
          'description' => 'One line item instance per product item will be added if 1.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'label' => array(
          'description' => 'The label for the customization field.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'description' => array(
          'description' => 'The description for the customization field.',
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
        ),
      ),
      'indexes' => array(
        'target_id' => array('target_id'),
      ),
    );
  }
}

/**
 * Implements hook_uninstall().
 */
function commerce_custom_product_uninstall() {
  variable_del('commerce_custom_product_customizing_pane_description');
  variable_del('commerce_custom_product_customizing_pane_update_button');
  variable_del('commerce_custom_product_customizing_skip');
}

/**
 * Add new columns to the field schema.
 */
function commerce_custom_product_update_7000() {
  $field_schema = commerce_custom_product_field_schema(array('type' => 'commerce_custom_product_line_item_type_reference'));
  foreach (field_read_fields(array('type' => 'commerce_custom_product_line_item_type_reference'), array('include_inactive' => TRUE)) as $field_name => $field) {
    $data_table = _field_sql_storage_tablename($field);
    $revision_table =_field_sql_storage_revision_tablename($field);
    if (!db_field_exists($data_table, $field['field_name'] . '_label')) {
      db_add_field($data_table, $field['field_name'] . '_label', $field_schema['columns']['label']);
    }
    if (!db_field_exists($data_table, $field['field_name'] . '_description')) {
      db_add_field($data_table, $field['field_name'] . '_description', $field_schema['columns']['description']);
    }
    if (!db_field_exists($revision_table, $field['field_name'] . '_label')) {
      db_add_field($revision_table, $field['field_name'] . '_label', $field_schema['columns']['label']);
    }
    if (!db_field_exists($revision_table, $field['field_name'] . '_description')) {
      db_add_field($revision_table, $field['field_name'] . '_description', $field_schema['columns']['description']);
    }
    // Ensure entity_translation_sync is properly set.
    $field['settings']['entity_translation_sync'] = array(
      'target_id',
      'use_multi',
    );
    field_update_field($field);
    foreach(field_read_instances(array('field_name' => $field['field_name'])) as $instance) {
      $instance['settings']['entity_translation_sync'] = array(
        'target_id',
        'use_multi',
      );
      field_update_instance($instance);
    }
  }
}
